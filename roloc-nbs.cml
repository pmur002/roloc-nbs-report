<html>
<head>
  <style type="text/css">
    @media print {
      body { }
      p.img { text-align: center; page-break-inside: avoid }
      img.CC { display: inline }
    }
    @media screen {
      body { max-width: 800px; margin: auto }
      p.img { text-align: center }
      img.CC { display: inline }
    }
    p.date {
      font-size: smaller;
      margin: 0;
    }
    p.ref {
      text-indent: -2em;
      padding-left: 2em;
    }
  </style>
</head>
<body>
  <h1>An ISCC-NBS Colour List for 'roloc'</h1>
  <p>
    <span style="font-style: italic">by Paul Murrell</span>
    <a href="http://orcid.org"><img alt="" src="https://www.stat.auckland.ac.nz/~paul/ORCID/ORCiD.png" style="width: 16px; height: 16px; vertical-align: middle" /></a> <span style="font-family: mono; font-size: small"><a href="http://orcid.org/0000-0002-3224-8858">http://orcid.org/0000-0002-3224-8858</a></span>
  </p>
  <p class="date">
    <rcode echo="FALSE" results="asis">
cat(format(Sys.Date(), "%A %d %B %Y"))
    </rcode>
  </p>

  <rcode id="init" echo="FALSE" message="FALSE" results="hide">
opts_chunk$set(comment=" ", tidy=FALSE)
options(width=100)
  </rcode>
  <rcode echo="FALSE">
    library(roloc)
  </rcode>

  <hr/>
  <p>
    <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/"><img class="CC"
    alt="Creative Commons License" style="border-width:0"
    src="https://i.creativecommons.org/l/by/4.0/88x31.png"/></a><br/><span
    xmlns:dct="http://purl.org/dc/terms/"
    property="dct:title">This document</span>
    by <span xmlns:cc="http://creativecommons.org/ns#"
    property="cc:attributionName">Paul
    Murrell</span> is licensed under a <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/">Creative
    Commons Attribution 4.0 International License</a>.
  </p>
  <hr/>
<!--
  <p style="color: red">
    FIXME: need to tag release 0.6 of roloc in git and push to github
  </p>
  <p style="color: red">
    FIXME: need to create Docker image pmur002/dom-v0.6
  </p>
  <p style="color: red">
    FIXME: once Docker image is ready, need to alter path to PhantomJS
    and build using 'make docker'
  </p>
  <p style="color: red">
    FIXME: once document is building with 'make docker', need to push
    pmur002/dom-v0.6 to Docker Hub
  </p>
-->
  <p>
    This report describes the development of a ('roloc' package) colour list 
    and colour metric
    based on the ISCC-NBS System of Color Designation (CITE).
  </p>

  <toc/>

  <h2><a name="intro">Introduction</a></h2>
  <p>
    The 'roloc' package for R (CITE) was created to provide tools 
    for transforming
    inscrutable colour specifications into more recognisable colour names.
    The <code>colourName()</code> function in the 'roloc' package
    can take an R hexadecimal string colour specification, like 
    <code>"#123456"</code> and produce a matching colour name.
  </p>
  <rcode>
library(roloc)
colourName("#123456")
  </rcode>
  <p>
    However, the colour names that the <code>colourName</code> function
    produces are not 
    always easily comprehensible themselves.  For example, in the
    following result, the colour name "chartreuse" may not be 
    meaningful to everyone, let alone the significance of 
    "chartreuse4" compared to "chartreuse3".
  </p>
  <rcode>
cols <- hcl(c(0, 120, 240), 80, 60)
cols
colourName(cols)
  </rcode>
  <p>
    Fortunately, the <code>colourName</code> function allows us to
    specify our own list of colour names <em>and</em> our own
    colour metric for deciding which colour name matches a colour
    specification.  For example, the <code>HTMLcolours</code>
    colour list provides a much smaller set of colour names and
    the <code>euclideanRGB</code> colour metric determines colour 
    matches based on euclidean distance in the sRGB colour space (CITE)
    (rather than the default euclidean distance in CIE LUV colour space; CITE).
  </p>
  <rcode>
colourName(cols, colourList=HTMLcolours, colourMetric=euclideanRGB)
  </rcode>
  <p>
    While these colours are much easier to interpret, there is a 
    danger of obtaining a misleading result.  For example, it is not clear that 
    <code>"grey"</code> is a good description of a colour that
    we previously identified as some sort of light red
    (<code><!--rinline colourName(cols[1]) --></code>).
  </p>
  <p>
    What we need is a list of colours that is sufficiently large 
    so as to provide a reasonable level of accuracy in describing colours,
    but uses relatively plain descriptive colour names.
  </p>
  <p>
    This document describes the development of a colour list and
    colour metric based on the 
    ISCC-NBS System of Color Designation,
    which produces colour names that have simple interpretations.  
  </p>

  <rcode>
library(rolocISCCNBS)
  </rcode>
  <rcode fig.height="1">
match <- colourMatch(cols, colourList=ISCCNBScolours, colourMetric=ISCCNBSblock)
colourName(match)
colourSwatch(match)
  </rcode>

  <h2><a name="ISCCNBS">The ISCC-NBS System of Color Designation</a></h2>
  <p>
    The ISCC-NBS System of Color Designation comes from a
    collaboration between the Inter-Society Color Council (ISCC) and the
    National Bureau of Standards (NBS) in the 1930s.  The aim was to produce a 
    way of designating colours that would be rigorous and reliable
    enough to be used
    across a broad range of disciplines and applications, but still
    be easily understood by the general public.
  </p>
  <p>
    The ISCC-NBS System describes colours in terms of their hue, using
    words like pink, red, orange, brown, etc, plus modifiers that relate
    to the saturation or chroma and the lightness or darkness of the colour,
    e.g., vivid, brilliant, light, dark, pale, etc.
  </p>
  <p>
    There are 267 distinct colour names in the ISCC-NBS system,
    with each colour name corresponding to a "block" of colours (a region
    of colour space), so that all colours fall into exactly
    one block and hence correspond to exactly one ISCC-NBS colour name.
    More precisely, 
    the ISCC-NBS System is defined in terms of the Munsell colour space (CITE),
    so any Munsell colour specification falls into exactly one ISCC-NBS
    block and corresponds to exactly one ISCC-NBS colour name.
  </p>
  <p class="img">
    <img src="diagram/ISCCNBS-1-trim.png" style="margin-right: 20px"/>
    <img src="diagram/ISCCNBS-2-trim.png" style="margin-left: 20px"/>
  </p>

  <h2><a name="ISCCNBScolours">An ISCC-NBS colour list</a></h2>
  <p>
    In terms of the 'roloc' package, a colour list consists of a set
    of colour names, plus a set of sRGB colour specifications, one per
    colour name.
    Each ISCC-NBS colour name corresponds to a block of colours, rather 
    than a single colour specification, however, there are published
    lists of sRGB centroids for the ISCC-NBS colour blocks (CITE).
    These sRGB centroids were used to generate the 
    <code>ISCCNBScolours</code> colour list in the 'rolocISCCNBS' 
    package.  
  </p>
  <p>
    This colour list allows ISCC-NBS colour names to be used with
    existing colour metrics, like <code>euclideanLUV</code>, to
    convert colour specifications to ISCC-NBS colour names based on
    the distance from the colour specification to the ISCC-NBS centroids.
  </p>
  <rcode fig.height="1">
match <- colourMatch(cols, colourList=ISCCNBScolours)
colourName(match)
colourSwatch(match)
  </rcode>
  <p>
    However, using a euclidean metric with the ISCC-NBS colour block
    centroids ignores the colour block boundaries, which can produce
    some surprising results.  For example, the following code 
    obtains colour names for a set of grey colour specifications and
    the resulting names are not all neutral greys.
  </p>
  <rcode>
colourName(grey(1:4/5), colourList=ISCCNBScolours)
  </rcode>

  <h2><a name="ISCCNBSblock">An ISCC-NBS colour metric</a></h2>
  <p>
    Because ISCC-NBS colour names actually correspond to blocks of
    colour space, a more appropriate colour metric involves determining
    which colour block a colour specification falls within.
  </p>
  <p>
    This is the purpose of the <code>ISCCNBSblock</code> colour metric
    function in the 'rolocISCCNBS' package.  
    Conceptually, this function converts each colour specification
    into a colour block and then converts each colour in the colour list
    into a colour block.  The distance between a colour 
    specification and a colour name is 0 if they are in the same block
    or infinity if they are in different blocks.
  </p>
  <p>
    When combined with the ISCC-NBS colour list, the 
    <code>ISCCNBSblock</code> colour metric can be more efficient
    and just convert each colour specification into a colour block
    (because the colour list already corresponds to colour blocks).
  </p>
  <p>
    If we use both the ISCC-NBS colour list and the ISCC-NBS colour metric,
    each colour specification corresponds to a single ISCC-NBS colour block
    and we obtain the ISCC-NBS colour name for that colour block.
    For example, the ISCC-NBS colour names for a set of sRGB greys
    are all neutral greys (because they all fall within neutral grey
    colour blocks in the ISCC-NBS System).
  </p>
  <rcode>
colourName(grey(1:4/5), colourList=ISCCNBScolours, colourMetric=ISCCNBSblock)
  </rcode>

  <p>
    The ISCC-NBS colour metric can also be used with other colour lists,
    although the results may be more interesting than useful.
    For example, the following code performs a colour match using
    the ISCC-NBS colour metric with
    the <code>HTMLcolours</code> colour list.  There are 3 colour 
    specifications and the colour list contains 16 colours, so the 
    result is a 3-by-16 matrix, with one row per colour specification
    and one column per colour on the colour list. 
    Two of the colour specifications have no match (all values on the row
    are <code>Inf</code> or <code>NA</code>) and one colour specification
    has two matches (there  are two zeroes in the second row).  In the 
    former case, this means that the colour specification does not 
    lie within the same ISCC-NBS colour block as any of the colours on the
    colour list.  In the latter
    case, this means that the colour specification is in the same ISCC-NBS
    block as two of the colours from the colour list.
    There are
    <code>NA</code> values in the matrix because some colours in the colour
    list have not converted successfully to Munsell colours (the colour
    could not be represented in Munsell colour space).  For example,
    neither <code>"black"</code> nor <code>"yellow"</code> have
    converted properly.  This is partly a limitation of the tools
    used to perform the conversion, which will be discussed more later.
  </p>
  <rcode fig.height="1">
match <- colourMatch(cols, colourList=HTMLcolours, colourMetric=ISCCNBSblock)
  </rcode>
  <p>
    The result of this colour match is that, for two of the colour
    specifications the colour is unknown, but for the other colour
    specifications there are two colour names that match.
  </p>
  <rcode fig.height="1">
colourNames(match)
colourSwatches(match)
  </rcode>
  <p>
    As previously mentioned, this may be more interesting than useful.
  </p>

  <h2><a name="ISCCNBSdevel">Developing the ISCC-NBS colour metric</a></h2>
  <p>
    Thanks to the existence of sRGB centroids for the ISCC-NBS System,
    it was very straightforward to create the 
    <code>ISCCNBScolours</code> colour list.
    However, the development of the 
    <code>ISCCNBSblock</code> colour metric was less straightforward.
    This section details the obstacles involved in creating the 
    ISCC-NBS colour metric and how they were overcome.
  </p>
  <p>
    The main problem is that the ISCC-NBS colour metric works in
    the ISCC-NBS colour space, which is defined in terms of regions 
    within Munsell colour space, but the 
    <code>ISCCNBSblock</code> function is given both a set of colour
    specifications and a colour list in terms of sRGB colour space.
    We need a conversion from sRGB to Munsell (and on to ISCC-NBS colour
    blocks).  
  </p>
  <p>
    One major difficulty with this conversion is that the Munsell colour
    space is essentially a discrete colour space;  there are 
    only known conversions between sRGB and Munsell colours
    for a finite set of Munsell colours
    (CITE RIT); there is no general formula.
  </p>
  <p>
    One way to use this finite set of conversions is to just find
    the closest match.
    Two packages were found that performed this sort of
    sRGB to Munsell conversion:
    'munsell' (CITE) and 'aqp' (CITE).  Both of these packages
    use euclidean distance (within CIE LUV or CIE LAB colour spaces)
    to determine the nearest Munsell colour match for a given sRGB 
    colour.  The problem with this approach is
    that different sRGB colour specifications
    will be converted to the same Munsell colour.
  </p>
  <rcode>
colours <- rbind(c(.09, .19, .29),
                 c(.10, .20, .30),
                 c(.11, .21, .31)) 
  </rcode>
  <rcode>
library(munsell)
rgb2mnsl(colours)
  </rcode>
  <rcode message="FALSE">
library(aqp)
rgb2munsell(colours)
  </rcode>

  <p>
    Another approach to using
    this finite set of sRGB-Munsell conversions 
    is to interpolate between the known matches.
    This approach has been implemented by Paul Centore (CITE)
    in several different languages, including R, Octave, and Python.  
    Unfortunately, 
    the R version, the 'munsellinterpol' package (CITE), does not
    appear to work correctly.
    However, the Python version, the 'Colour' package (CITE),
    does work and, with the help of the 'reticulate' packge (CITE),
    can be run easily from R.
  </p>
  <p>
    The function we need from the Python 'Colour' package
    is called <code>xyY_to_munsell_colour</code> which, as the 
    name suggests, requires colours in CIE xyY colour space (CITE),
    so we must first convert from sRGB to xyY.  This can be achieved
    using functions from the 'colorscience' package (CITE) and
    notice that we must also perform chromatic adaptation from the
    D65 illuminant that is defined for sRGB to the C illuminant 
    Munsell colours.
  </p>
  <rcode message="FALSE">
library(colorscience)
xyYcolours <- XYZ2xyY(RGB2XYZ(colours, illuminant="C"))
  </rcode>
  <p>
    With this approach, different sRGB colours are converted to 
    different Munsell colours and the loss of resolution 
    compared to the nearest-match approach is very clear,
    particularly in terms of hue.
  </p>
  <rcode>
library(reticulate)
colour <- import("colour")
apply(xyYcolours, 1, colour$xyY_to_munsell_colour)
  </rcode>

  <p>
    The final step is to convert these Munsell colours to
    ISCC-NBS blocks, which can be performed using the functions
    <code>MunsellSpecToHVC</code> and 
    <code>ColorBlockFromMunsell</code> from the
    'colorscience' package.
  </p>
  <rcode>
munsellColours <- apply(xyYcolours, 1, colour$xyY_to_munsell_colour)
ColorBlockFromMunsell(MunsellSpecToHVC(munsellColours))
  </rcode>

  <p>
    Although this solution appears to produce a good result, there
    are still some issues.  The <code>xyY_to_munsell_colour</code>
    function performs an iterative search to find a Munsell colour and 
    this is both relatively slow and not guaranteed to succeed.
    For example, the conversion does not work for very dark colours ...
  </p>
  <rcode>
colour$xyY_to_munsell_colour(XYZ2xyY(RGB2XYZ(c(0, 0, 0), illuminant="C")))
  </rcode>
  <p>
    ... and in other cases the iterations do not converge on a solution ...
  </p>
  <rcode>
colour$xyY_to_munsell_colour(XYZ2xyY(RGB2XYZ(c(1, 1, 1), illuminant="C")))
  </rcode>
  <p>
    The dependence on 'reticulate', to gain access to the Python 
    package 'Colour', is a practical obstacle because it means that 
    installation of the 'rolocISCCNBS' package requires the user to
    install Python (and the Python package 'Colour') on their system.
  </p>
  <p>
    However, we can avoid having
    'rolocISCCNBS' depend upon 'reticulate' (and Python)
    if we <em>pre-calculate</em>
    all sRGB to Munsell (to ISCC-NBS colour block) conversions.
    Pre-calculating these conversions is possible because there are
    only a finite (if large) set of possible sRGB specifications in R.
  </p>
  <p>
    R stores colours using 8 bits each for red, green, and blue 
    components (24-bit colour).  This means that there are 
    16,777,216 (2 to the power of 24) possible colour specifications in R.
    Every one
    of those sRGB colour specifications has been converted to an
    ISCC-NBS colour name and the result is stored in an
    R character vector in the 'rolocISCCNBS' package (in a known order).
  </p>
  <p>
    This means that the conversion from sRGB to ISCC-NBS colour name 
    is just a table look up using the integer red, green, and blue
    components of the colour specification as an index into the
    character vector of ISCC-NBS colour names.
  </p>
  <p>
    This does mean that the 'rolocISCCNBS' package contains an R object
    approximately 2.7 MB in size (which takes a few seconds to load
    the first time that the <code>ISCCNBSblock</code> function is called), 
    but it removes the need for a
    dependence on the 'reticulate' package (and Python).
  </p>

  <h2><a name="examples">Examples</a></h2>
  <p>
    A good test of how well a colour list performs is to test it on 
    one of the colour scales that different R packages produce.
    The following example shows that the ISCC-NBS colour list and
    colour metric perform quite well on a relatively complex
    colour scale produced by the 'pals' package (CITE).
    Note the use of options to set the default colour list and colour
    metric for the 'roloc' package.
  </p>
  <rcode fig.height="5" message="FALSE">
options(roloc.colourList=ISCCNBScolours,
        roloc.colourMetric=ISCCNBSblock)
library(pals)
colourSwatch(stepped())    
  </rcode>

  <h2><a name="summary">Discussion</a></h2>
  <p>
    The conversion will have holes because, although ISCC-NBS covers
    all of Munsell, the sRGB-to-Munsell conversion does not always work.
    
    NOTE that the swatch produced for an ISCC-NBS colour block 
    ONLY represents the block centroid;  a block encompasses many
    different colours.
  </p>

  <h2><a name="summary">Summary</a></h2>
  <p>
  </p>

  <h2><a name="requirements">Technical requirements</a></h2>
  <p>
    The examples and discussion in this document relate to <a
    href="https://github.com/pmur002/roloc/releases/tag/v0.1">version
    0.1</a> of the 'roloc' package; version 0.27 of the 
    <a href="https://github.com/ajrgrodfrey/BrailleR/">BrailleR</a>
    package.
  </p>
  <p>
    This report was generated within a Docker container
    (see <a href="#Resources">Resources</a> section below).
  </p>

  <h2><a name="Resources">Resources</a></h2>
  <ul>
    <li>
      The <a href="roloc-brailler.cml">raw source file</a> for this
      report, a <a href="roloc-brailler.xml">valid XML</a>
      transformation of the source file, a <a
      href="roloc-brailler.Rhtml">'knitr' document</a> generated from
      the XML file, 
      two <a href="toc.R">R</a> <a href="bib.R">files</a> and
      the <a href="roloc.bib">bibtex file</a>
      that are used to generate the table of contents and reference sections,
      two <a href="common.xsl">XSL</a> <a
      href="knitr.xsl">files</a> that are used to transform the XML to
      the 'knitr' document, and a <a href="Makefile">Makefile</a> that
      contains code for the other transformations and coordinates
      everything.  
    </li>
    <li>
      This report was generated within a 
      <a href="https://www.docker.com/">Docker</a> container.
      The Docker command to build the report is included in the Makefile above.
      The Docker image for the container is available from
      <a href="https://hub.docker.com/r/pmur002/roloc-brailler/">Docker Hub</a>;
      alternatively, the image can be rebuilt from its 
      <a href="Dockerfile">Dockerfile</a>.
    </li>
    <li>
      The <a href="https://github.com/pmur002/roloc">'roloc' package</a> 
      on github.
    </li>
    <li>
      The 
      <a href="https://github.com/ajrgodfrey/BrailleR">'BrailleR' package</a> 
      on github.
    </li>
  </ul>

  <h2>Acknowledgements</h2>
  <p>
    Ken Knoblauch, Graham Finlayson, and Philip Green for expert pointers and
    advice on colour, particularly for conversions to and from Munsell.
  </p>

  <h2>How to cite this document</h2>
  <p>
    Murrell, P. (2018). "An ISCC-NBS Colour List for 'roloc'" 
    Technical Report 2018-??, University of Auckland. 
    [ <a href="how-to-cite.bib">bib</a> ] 
  </p>

  <h2><a name="references">References</a></h2>
  <ul style="list-style-type: none">
    <li>
      <a name="roloc-pkg"></a>
    </li>
  </ul>

  <hr/>
  <p>
    <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/"><img class="CC"
    alt="Creative Commons License" style="border-width:0"
    src="https://i.creativecommons.org/l/by/4.0/88x31.png"/></a><br/><span
    xmlns:dct="http://purl.org/dc/terms/"
    property="dct:title">This document</span>
    by <span xmlns:cc="http://creativecommons.org/ns#"
    property="cc:attributionName">Paul
    Murrell</span> is licensed under a <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/">Creative
    Commons Attribution 4.0 International License</a>.
  </p>

</body>
</html>
